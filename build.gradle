apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    mavenCentral()
    mavenLocal()
}

subprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

dependencies {
    compile project(':combined')
}

task zipJumpstartGradle(type: Zip) {
    archiveName = 'jumpstart-gradle.zip'
    destinationDir = file('dist')
    excludes = ['README.md', 'build.gradle', 'server-app/build.gradle', 'server-app/src/main/webapp/WEB-INF/web.xml', 'settings.gradle', 'classes', 'dist', 'out', '**/pom.xml', '.*', '**/build/', '**/target/', 'gradle-app.setting', 'atlassian*', '**/*.i*', '**/step_*/']
    from '.'
    rename('(.*)-template.(.*)', '$1.$2')
}

task zipJumpstartMaven(type: Zip) {
    from '.'
    archiveName = 'jumpstart-maven.zip'
    destinationDir = file('dist')
    excludes = ['README.md','server-app/src/main/webapp/WEB-INF/web.xml', 'classes', 'dist', 'out', 'gradle*', '**/*.gradle', '.*', '**/build/', '**/target/', 'gradle-app.setting', 'atlassian*', '**/*.i*', '**/step_*/']
    rename('(.*)-template.(.*)', '$1.$2')

}

task zipJumpstart(dependsOn: [zipJumpstartGradle, zipJumpstartMaven])

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(run)) {
        if (!project.hasProperty('step') || !(project['step'] in ('0'..'7'))) {
            throw new StopActionException('Specify the step id you want to run by passing command line parameter -Pstep=<step_id>. Allowed values are between 0 and 7.')
        }
        def runStep = project['step']
        if (runStep == '7') {
            logger.lifecycle('Make sure that your server is running. on http://localhost:8080')
        }
        def sampleClass = runStep in ('0'..'4') ? "step_${runStep}.JumpStart" : "step_${runStep}.TutorialStarter"
        logger.lifecycle("Running main class : $sampleClass")
        mainClassName = sampleClass
    }
}

